@model IEnumerable<DNXTest.Models.ContactAddress>
@{

}
@if (Model.Count() == 0)
{
    string inputFieldHTML = "<input class='form-control text-box single-line' data-val='true' data-val-length='The field {0} must be a string with a maximum length of 50.' data-val-length-max='50' id='' name='Addresses[][{0}]' type='text' value='' />";
    string inputFieldCountry = "<input type='text' class='typeahead tt-input form-control text-box single-line isCountry' autocomplete='off' name='Addresses[][Country]' >";
    <div class="row container paddingTop10">
        <div class="col-sm-6" id="divAddresses">
            <div class="form-group">
                <label class="" for="Street">Street</label>
                <div class="">
                    @Html.Raw(string.Format(inputFieldHTML, "Street"))
                </div>
            </div>

            <div class="form-group">
                <label class="" for="POBOX">POBOX</label>
                <div class="">
                    @Html.Raw(string.Format(inputFieldHTML, "POBOX"))
                </div>
            </div>

            <div class="form-group">
                <label class="" for="Neighborhood">Neighborhood</label>
                <div class="">
                    @Html.Raw(string.Format(inputFieldHTML, "Neighborhood"))
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label class="" for="City">City</label>
                <div class="">
                    @Html.Raw(string.Format(inputFieldHTML, "City"))
                </div>
            </div>

            <div class="form-group">
                <label class="" for="Province">Province</label>
                <div class="">
                    @Html.Raw(string.Format(inputFieldHTML, "Province"))
                </div>
            </div>

            <div class="form-group">
                <label class="" for="PostalCode">Postal Code</label>
                <div class="">
                    @Html.Raw(string.Format(inputFieldHTML, "PostalCode"))
                </div>
            </div>
        </div>
    </div>
    <div class="row container">
        <div class="col-sm-6">
            <div class="form-group">
                <label class="" for="Country">Country</label>
                <div class="country">
                    @Html.Raw(string.Format(inputFieldCountry))
                </div>
            </div>
        </div>
        <div class="col-sm-6 ">
            <div class="form-group">
                <label class="" for="Contry">&nbsp;</label>
                <div class="form-group">
                    <input type="button" value="Add address" class="btn btn-default btn-add-dyn" id="btnAddAddress" />
                    <span class="help-block" id="Addresses[][Country]-error">&nbsp;</span>
                </div>
            </div>
        </div>
    </div>
    <div id="divNewAddress"></div>
}
else
{
    bool first = true;
    bool oddBackground = false;
    string inputFieldHTML__WithValue = "<input class='form-control text-box single-line' data-val='true' data-val-length='The field {0} must be a string with a maximum length of 50.' data-val-length-max='50' id='' name='Addresses[][{0}]' type='text' value='{1}' />";

    string inputFieldCountry_WithValue = "<input type='text' class='typeahead tt-input form-control text-box single-line isCountry' autocomplete='off' name='Addresses[][Country]' value ='{0}' >";
    string oddBackgroudClass = string.Format("{0}", (oddBackground) ? " oddBackground" : "");
    int countTotal = Model.Count(), count = 1;

    foreach (var item in Model)
    {
        if (count == 1)
        {
            <div class="divAddress">
                <div class=@Html.Raw(string.Format("'row container{0} '", (oddBackground) ? " oddBackground" : ""))>
                    <div class=@Html.Raw(string.Format("'{0} paddingTop10'", (oddBackground) ? "col-sm-6 oddBackground" : "col-sm-6 "))
                         @if (first) { @Html.Raw(" id='divAddresses'")     first = false; } else { }>
                        <div class="form-group">
                            <label class="" for="Street">Street</label>
                            <div class="">
                                @Html.Raw(string.Format(inputFieldHTML__WithValue, "Street", item.Street))
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="" for="POBOX">POBOX</label>
                            <div class="">
                                @Html.Raw(string.Format(inputFieldHTML__WithValue, "POBOX", item.POBOX))
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="" for="Neighborhood">Neighborhood</label>
                            <div class="">
                                @Html.Raw(string.Format(inputFieldHTML__WithValue, "Neighborhood", item.Neighborhood))
                            </div>
                        </div>
                    </div>
                    <div class=@Html.Raw(string.Format("{0} ", (oddBackground) ? "'col-sm-6 oddBackground'" : "'col-sm-6'"))>
                        <div class="form-group">
                            <label class="" for="City">City</label>
                            <div class="">
                                @Html.Raw(string.Format(inputFieldHTML__WithValue, "City", item.City))
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="" for="Province">Province</label>
                            <div class="">
                                @Html.Raw(string.Format(inputFieldHTML__WithValue, "Province", item.Province))
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="" for="PostalCode">Postal Code</label>
                            <div class="">
                                @Html.Raw(string.Format(inputFieldHTML__WithValue, "PostalCode", item.PostalCode))
                            </div>
                        </div>
                    </div>
                </div>
                <div class=@Html.Raw(string.Format("'row container{0}'", (oddBackground) ? " oddBackground" : ""))>
                    <div class=@Html.Raw(string.Format("'{0} col-sm-6'", (oddBackground) ? "paddingBottom15 oddBackground" : "paddingBottom15"))>
                        <div class="form-group">
                            <label class="" for="Contry">Country</label>
                            <div class="country">
                                @Html.Raw(string.Format(inputFieldCountry_WithValue, item.Country))
                            </div>
                        </div>
                    </div>
                    <div class=@Html.Raw(string.Format("'{0} col-sm-6'", (oddBackground) ? "paddingBottom15 oddBackground" : "paddingBottom15"))>
                        <div class="form-group">
                            <label class="" for="Contry">&nbsp;</label>
                            <div class="">
                                <input type="button" value="Add address" class="btn btn-default btn-add-dyn" id="btnAddAddress" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
                @Html.Raw("<div id='divNewAddress'>")
}
else
{
    <div class="divAddress">
        <div class=@Html.Raw(string.Format("'row container{0} paddingTop10'", (oddBackground) ? " oddBackground" : ""))>
            <div class=@Html.Raw(string.Format("'{0}'", (oddBackground) ? "col-sm-6 oddBackground" : "col-sm-6"))>
                <div class="form-group">
                    <label class="" for="Street">Street</label>
                    <div class="">
                        @Html.Raw(string.Format(inputFieldHTML__WithValue, "Street", item.Street))
                    </div>
                </div>
                <div class="form-group">
                    <label class="" for="POBOX">POBOX</label>
                    <div class="">
                        @Html.Raw(string.Format(inputFieldHTML__WithValue, "POBOX", item.POBOX))
                    </div>
                </div>
                <div class="form-group">
                    <label class="" for="Neighborhood">Neighborhood</label>
                    <div class="">
                        @Html.Raw(string.Format(inputFieldHTML__WithValue, "Neighborhood", item.Neighborhood))
                    </div>
                </div>
            </div>
            <div class=@Html.Raw(string.Format("{0}", (oddBackground) ? "'col-sm-6 oddBackground'" : "'col-sm-6'"))>
                <div class="form-group">
                    <label class="" for="City">City</label>
                    <div class="">
                        @Html.Raw(string.Format(inputFieldHTML__WithValue, "City", item.City))
                    </div>
                </div>
                <div class="form-group">
                    <label class="" for="Province">Province</label>
                    <div class="">
                        @Html.Raw(string.Format(inputFieldHTML__WithValue, "Province", item.Province))
                    </div>
                </div>
                <div class="form-group">
                    <label class="" for="PostalCode">Postal Code</label>
                    <div class="">
                        @Html.Raw(string.Format(inputFieldHTML__WithValue, "PostalCode", item.PostalCode))
                    </div>
                </div>
            </div>
        </div>
        <div class=@Html.Raw(string.Format("'row container{0}'", (oddBackground) ? " oddBackground" : ""))>
            <div class=@Html.Raw(string.Format("'{0} col-sm-6'", (oddBackground) ? "paddingBottom15 oddBackground" : "paddingBottom15"))>
                <div class="form-group">
                    <label class="" for="Contry">Country</label>
                    <div class="country">
                        @Html.Raw(string.Format(inputFieldCountry_WithValue, item.Country))
                    </div>
                </div>
            </div>
            <div class=@Html.Raw(string.Format("'{0} col-sm-6'", (oddBackground) ? "paddingBottom15 oddBackground" : "paddingBottom15"))>
                <div class="form-group">
                    <label class="" for="Contry">&nbsp;</label>
                    <div class="">
                        <input type="button" value="Remove address" class="btn btn-default removeDiv btn-add-dyn" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    }
    oddBackground = !oddBackground;
    count += 1;
}
    @Html.Raw("</div>")
    }
